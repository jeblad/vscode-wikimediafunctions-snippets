{
	"@metadata": {
		"name": "class",
		"comment": "Standard class structure.",
		"authors": [
			"Jeblad"
		]
	},
	"class.plain 001": {
		"prefix": "class.plain",
		"body": [
			"--- Class for ${1:description}",
			"",
			"-- @var class var for this lib",
			"local ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g} = {}",
			"",
			"--- Create a new instance",
			"-- @param vararg",
			"-- @return self",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}.create( ... )",
			"\tlocal self = setmetatable( {}, ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g} )",
			"\tself:_init( ... )",
			"\treturn self",
			"end",
			"",
			"--- Initialize a new instance",
			"-- @private",
			"-- @param vararg",
			"-- @return self",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:_init( ... ) -- luacheck: no unused args",
			"\tlocal t = { ... }",
			"\t--@todo must probably be completed",
			"\treturn self",
			"end",
			"",
			"$0",
			"",
			"-- Return the final class",
			"return ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}"
		],
		"description": "Plain class structure.\n"
	},
	"class.base 002": {
		"prefix": "class.base",
		"body": [
			"--- Baseclass for ${1:description}",
			"",
			"-- @var class var for this lib",
			"local ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g} = {}",
			"",
			"--- Lookup of missing class members",
			"-- @param string used for lookup of member",
			"-- @return any",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:__index( key ) -- luacheck: no self",
			"\treturn ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}[key]",
			"end",
			"",
			"--- Create a new instance",
			"-- @param vararg",
			"-- @return self",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}.create( ... )",
			"\tlocal self = setmetatable( {}, ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g} )",
			"\tself:_init( ... )",
			"\treturn self",
			"end",
			"",
			"--- Initialize a new instance",
			"-- @private",
			"-- @param vararg",
			"-- @return self",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:_init( ... )",
			"\tlocal t = { ... }",
			"\t--@todo must probably be completed",
			"\treturn self",
			"end",
			"",
			"$0",
			"",
			"-- Return the final class",
			"return ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}"
		],
		"description": "Baseclass structure.\n"
	},
	"class.base 003": {
		"prefix": "class.sub",
		"body": [
			"--- Subclass for ${1:description}",
			"",
			"-- @var class var for base lib",
			"local Base = require '${TM_DIRECTORY}/${2:base-file}'",
			"",
			"-- @var class var for lib",
			"local ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g} = {}",
			"",
			"--- Lookup of missing class members",
			"-- @param string used for lookup of member",
			"-- @return any",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:__index( key ) -- luacheck: no self",
			"\treturn ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}[key]",
			"end",
			"",
			"-- @var metatable for the class",
			"setmetatable( ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}, { __index = Base } )",
			"",
			"--- Create a new instance",
			"-- @param vararg",
			"-- @return self",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}.create( ... )",
			"\tlocal self = setmetatable( {}, ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g} )",
			"\tself:_init( ... )",
			"\treturn self",
			"end",
			"",
			"--- Initialize a new instance",
			"-- @private",
			"-- @param vararg",
			"-- @return self",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:_init( ... )",
			"\tlocal t = { ... }",
			"\t--@todo must probably be completed",
			"\treturn self",
			"end",
			"",
			"$0",
			"",
			"-- Return the final class",
			"return ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}"
		],
		"description": "Subclass structure.\n"
	},
	"class.lookup 002": {
		"prefix": "class.lookup",
		"body": [
			"--- Lookup of missing class members",
			"-- @param string used for lookup of member",
			"-- @return any",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:__index( key ) -- luacheck: no self",
			"\t$0",
			"\treturn ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}[key]",
			"end"
		],
		"description": "Lookup missing baseclass members.\n"
	},
	"class.index 003": {
		"prefix": "class.index",
		"body": [
			"--- Lookup of missing class members",
			"-- @param string used for lookup of member",
			"-- @return any",
			"function${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:__index( key ) -- luacheck: no self",
			"\t$0",
			"\treturn ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}[key]",
			"end"
		],
		"description": "Lookup missing instance members.\n"
	},
	"class.create 004": {
		"prefix": "class.create",
		"body": [
			"--- Create a new instance",
			"-- @param vararg",
			"-- @return self",
			"function${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}.create( ... )",
			"\tlocal self = setmetatable( {}, ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g} )",
			"\tself:_init( ... )",
			"\t$0",
			"\treturn self",
			"end"
		],
		"description": "Create class instance.\n"
	},
	"class.init 005": {
		"prefix": "class.init",
		"body": [
			"--- Initialize a new instance",
			"-- @private",
			"-- @param vararg",
			"-- @return self",
			"function${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:_init( ... )",
			"\t$0",
			"\treturn self",
			"end"
		],
		"description": "Initialize class instance.\n"
	},
	"class.accessor 006": {
		"prefix": "class.accessor",
		"body": [
			"--- Access to member $1",
			"-- @param vararg",
			"-- @return any",
			"function${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:${1:name}( ... )",
			"\tif select( '#', ... ) ~= 0 then",
			"\t\tself._$1 = { ... }",
			"\tend",
			"\treturn unpack( self._$1 )",
			"end",
			"$0"
		],
		"description": "Access to instance member.\n"
	},
	"class.set 007": {
		"prefix": "class.set",
		"body": [
			"--- Set member $1",
			"-- @param value",
			"-- @return self",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:set_${1:name}( value )",
			"\tassert( val, 'Failed to provide a value' )",
			"\tself._$1 = value",
			"return self",
			"end",
			"$0"
		],
		"description": "Set instance member value.\n"
	},
	"class.get 008": {
		"prefix": "class.get",
		"body": [
			"--- Get member $1",
			"-- @return any",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:get_${1:name}()",
			"\treturn self._$1",
			"end",
			"$0"
		],
		"description": "Get instance member value.\n"
	},
	"class.is 009": {
		"prefix": "class.is",
		"body": [
			"--- Is instance $1 value",
			"-- @param value",
			"-- @return boolean",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:is_${1:name}( value )",
			"\treturn self._$1 == value",
			"end",
			"$0"
		],
		"description": "Is instance member something.\n"
	},
	"class.has 010": {
		"prefix": "class.has",
		"body": [
			"--- Has instance $1 value",
			"-- @param value",
			"-- @return boolean",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:has_${1:name}( value )",
			"\tfor _,that in ipairs( self._$1 ) do",
			"\t\tif that:is_$1( value ) then",
			"\t\t\treturn true",
			"\t\tend",
			"\tend",
			"\treturn false",
			"end",
			"$0"
		],
		"description": "Has instance member something.\n"
	},
	"class.method 011": {
		"prefix": "class.method",
		"body": [
			"--- Method $1",
			"function ${TM_FILENAME_BASE/[^a-z]*([a-z]+)/${1:/capitalize}/g}:${1:name}()",
			"end",
			"$0"
		],
		"description": "Instance method.\n"
	}
}