{
	"@metadata": {
		"name": "frame",
		"comment": "The library is an object, and as such can not be properly identified unless intellisense is active. This is nearly always named as \"frame\", so it is pretty safe to assume it can be used as prefix.",
		"authors": [
			"Jeblad"
		]
	},
	"frame 001": {
		"prefix": "args",
		"body": [
			"args"
		],
		"description": "Table for arguments passed to the frame."
	},
	"frame 002": {
		"prefix": "frame:callParserFunction( name, args )",
		"body": [
			"frame:callParserFunction( ${1:name}${2:, ${3:args}} )$0"
		],
		"description": "Call a parser function, returning an appropriate string.\n"
	},
	"frame 003": {
		"prefix": "frame:callParserFunction( name, ... )",
		"body": [
			"frame:callParserFunction( ${1:name}${2:, ${3:...}} )$0"
		],
		"description": "Call a parser function, returning an appropriate string.\n"
	},
	"frame 004": {
		"prefix": "frame:callParserFunction{ name = string, args = table }",
		"body": [
			"frame:callParserFunction{ name = ${1:string}, args = ${2:table} }$0"
		],
		"description": "Call a parser function, returning an appropriate string.\n"
	},
	"frame 005": {
		"prefix": "frame:expandTemplate{ name = string, args = table }",
		"body": [
			"frame:expandTemplate{ name = ${1:string}, args = ${2:table} }$0"
		],
		"description": "Transclude a template, returning an appropriate string.\n"
	},
	"frame 006": {
		"prefix": "frame:extensionTag( name, content, args )",
		"body": [
			"frame:extensionTag( ${1:name}${2:[, content]}${3:[, args]} )$0"
		],
		"description": "Call a tag function, returning an appropriate string.\n"
	},
	"frame 007": {
		"prefix": "frame:extensionTag{ name = string, content = string, args =table_or_string }",
		"body": [
			"frame:extensionTag{ name = ${1:string}, args = ${2:string}, args = ${3:table_or_string} }$0"
		],
		"description": "Call a tag function, returning an appropriate string.\n"
	},
	"frame 008": {
		"prefix": "frame:getParent()",
		"body": [
			"frame:getParent()$0"
		],
		"description": "Get the frame of the parent, in the \"invoke\" hierarchy.\n"
	},
	"frame 009": {
		"prefix": "frame:getTitle()",
		"body": [
			"frame:getTitle()$0"
		],
		"description": "Get the title as a string of the frame.\n"
	},
	"frame 010": {
		"prefix": "frame:newChild{ title = title, args = table }",
		"body": [
			"frame:newChild{ title = ${1:title}, args = ${2:table} }$0"
		],
		"description": "Create a new child of the current frame.\n"
	},
	"frame 011": {
		"prefix": "frame:preprocess( string )",
		"body": [
			"frame:preprocess( ${1:string} )$0"
		],
		"description": "Expand the string in the context of the frame.\n"
	},
	"frame 012": {
		"prefix": "frame:preprocess{ text = string }",
		"body": [
			"frame:preprocess{ text = ${1:string} }$0"
		],
		"description": "Expand the string in the context of the frame.\n"
	},
	"frame 013": {
		"prefix": "frame:getArgument( arg )",
		"body": [
			"frame:getArgument( ${1:arg} )$0"
		],
		"description": "Gets an object for the specified argument, or nil if the argument is not provided.\n"
	},
	"frame 014": {
		"prefix": "frame:getArgument{ name = arg }",
		"body": [
			"frame:getArgument{ name = ${1:arg} }$0"
		],
		"description": "Gets an object for the specified argument, or nil if the argument is not provided.\n"
	},
	"frame 015": {
		"prefix": "frame:newParserValue( text )",
		"body": [
			"frame:newParserValue( ${1:text} )$0"
		],
		"description": "Returns an object with a method :expand(), that returns :preprocess( text ).\n"
	},
	"frame 016": {
		"prefix": "frame:newParserValue( text = text )",
		"body": [
			"frame:newParserValue{ text = ${1:text} }$0"
		],
		"description": "Returns an object with a method :expand(), that returns :preprocess( text ).\n"
	},
	"frame 017": {
		"prefix": "frame:newTemplateParserValue{ title = title, args = table }",
		"body": [
			"frame:newTemplateParserValue{ title = ${1:title}, args = ${2:table} }$0"
		],
		"description": "Returns an object with a method :expand(), that returns :preprocess( text ).\n"
	},
	"frame 018": {
		"prefix": "frame:argumentPairs()",
		"body": [
			"frame:argumentPairs()$0"
		],
		"description": "Same as pairs( frame.args )\n"
	}
}