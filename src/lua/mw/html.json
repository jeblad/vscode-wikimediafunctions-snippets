{
	"@metadata": {
		"name": "html",
		"comment": "This is a mixed library and object. The creator act as a library and can be fully identified by its library prefix, but the created object can not be identified unless intellisense is active. This is nearly always named as \"mw.html\", as it is part of the standard mw-lib, so it is pretty safe to assume it can be used as prefix.",
		"authors": [
			"Jeblad"
		]
	},
	"mw.html 001": {
		"prefix": "mw.html.create( tagName, argsTable )",
		"body": [
			"mw.html.create( ${1:tagName}${2:, ${3:argsTable}} )$0"
		],
		"description": "Creates a new instance with the given tag.\n"
	},
	"mw.html 002": {
		"prefix": "mw.html:node( builder )",
		"body": [
			":node( ${1:builder} )$0"
		],
		"description": "Appends a child to the current node.\n"
	},
	"mw.html 003": {
		"prefix": "mw.html:wikitext( ... )",
		"body": [
			":wikitext( ${1:...} )$0"
		],
		"description": "Appends wikitext strings to the current node.\n"
	},
	"mw.html 004": {
		"prefix": "mw.html:newline()",
		"body": [
			":newline()$0"
		],
		"description": "Appends a newline to the current node.\n"
	},
	"mw.html 005": {
		"prefix": "mw.html:tag( tagName, argsTable )",
		"body": [
			":tag( ${1:tagName}, ${2:argsTable} )$0"
		],
		"description": "Appends a new child node with the given tag to the current node.\n"
	},
	"mw.html 006": {
		"prefix": "mw.html:attr( name, value )",
		"body": [
			":attr( ${1:name}, ${2:value} )$0"
		],
		"description": "Set a html attribute with the given name and value on the current node.\n"
	},
	"mw.html 007": {
		"prefix": "mw.html:attr( argsTable )",
		"body": [
			":attr( ${1:argsTable} )$0"
		],
		"description": "Set html attributes with the given name and value on the current node.\n"
	},
	"mw.html 008": {
		"prefix": "mw.html:getAttr( name )",
		"body": [
			":getAttr( ${1:name} )$0"
		],
		"description": "Get the value of a html attribute previously set on the current node.\n"
	},
	"mw.html 009": {
		"prefix": "mw.html:addClass( class )",
		"body": [
			":addClass( ${1:class} )$0"
		],
		"description": "Adds the class name to the current node.\n"
	},
	"mw.html 010": {
		"prefix": "mw.html:css( name, value )",
		"body": [
			":css( ${1:name}, ${2:value} )$0"
		],
		"description": "Set a css property with the given name and value on the current node.\n"
	},
	"mw.html 011": {
		"prefix": "mw.html:css( cssTable )",
		"body": [
			":css( ${1:cssTable} )$0"
		],
		"description": "Set css properties with the given name and value on the current node.\n"
	},
	"mw.html 012": {
		"prefix": "mw.html:cssText( css )",
		"body": [
			":cssText( ${1:css} )$0"
		],
		"description": "Add raw css to the style attribute on the current node.\n"
	},
	"mw.html 013": {
		"prefix": "mw.html:done()",
		"body": [
			":done()$0"
		],
		"description": "Returns the parent node under which the current node was created.\n"
	},
	"mw.html 014": {
		"prefix": "mw.html:allDone()",
		"body": [
			":allDone()$0"
		],
		"description": "Returns the root node under which the current node was created."
	}
}