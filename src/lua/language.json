{
	"@metadata": {
		"name": "language",
		"comment": "This is a mixed library and object. The creator act as a library and can be fully identified by its library prefix, but the created object can not be identified unless intellisense is active. This is nearly always named as \"mw.language\", as it is part of the standard mw-lib, so it is pretty safe to assume it can be used as prefix.",
		"authors": [
			"Jeblad"
		]
	},
	"mw.language 001": {
		"prefix": "mw.language.fetchLanguageName( code, inLanguage )",
		"body": [
			"mw.language.fetchLanguageName( ${1:code}, ${2:inLanguage} )$0"
		],
		"description": "The full name of the language for the given language code.\n"
	},
	"mw.language 002": {
		"prefix": "mw.language.fetchLanguageNames( inLanguage, include )",
		"body": [
			"mw.language.fetchLanguageNames( ${1:inLanguage${2:, ${3:include}}} )$0"
		],
		"description": "Fetch the list of known languages.\n"
	},
	"mw.language 003": {
		"prefix": "mw.language.getContentLanguage()",
		"body": [
			"mw.language.getContentLanguage()$0"
		],
		"description": "Returns a language object for the default content language.\n"
	},
	"mw.language 004": {
		"prefix": "mw.language.getContentLanguage()",
		"body": [
			"mw.getContentLanguage()$0"
		],
		"description": "Returns a language object for the default content language.\n"
	},
	"mw.language 005": {
		"prefix": "mw.language.getFallbacksFor( code )",
		"body": [
			"mw.language.getFallbacksFor( ${1:code} )$0"
		],
		"description": "Returns a list of fallback language codes for the given code.\n"
	},
	"mw.language 006": {
		"prefix": "mw.language.isKnownLanguageTag( code )",
		"body": [
			"mw.language.isKnownLanguageTag( ${1:code} )$0"
		],
		"description": "Checks whether language code is a valid built-in code with known denomyn.\n"
	},
	"mw.language 007": {
		"prefix": "mw.language.isSupportedLanguage( code )",
		"body": [
			"mw.language.isSupportedLanguage(${1:code} )$0"
		],
		"description": "Checks whether localisation is available for the language code.\n"
	},
	"mw.language 008": {
		"prefix": "mw.language.isValidBuiltInCode( code )",
		"body": [
			"mw.language.isValidBuiltInCode( ${1:code} )$0"
		],
		"description": "Checks whether the language code is valid for internal customisation.\n"
	},
	"mw.language 009": {
		"prefix": "mw.language.isValidCode( code )",
		"body": [
			"mw.language.isValidCode( ${1:code} )$0"
		],
		"description": "Checks whether the language code is superficially valid.\n"
	},
	"mw.language 010": {
		"prefix": "mw.language.new( code )",
		"body": [
			"mw.language.new( ${1:code} )$0"
		],
		"description": "Creates a new language object."
	},
	"mw.language 011": {
		"prefix": "mw.getLanguage( code )",
		"body": [
			"mw.getLanguage( ${1:code} )$0"
		],
		"description": "Creates a new language object."
	},
	"mw.language 012": {
		"prefix": "mw.language:getCode()",
		"body": [
			":getCode()$0"
		],
		"description": "Get the language code for the current language object.\n"
	},
	"mw.language 013": {
		"prefix": "mw.language:getFallbackLanguages()",
		"body": [
			":getFallbackLanguages()$0"
		],
		"description": "Get a list of language fallback codes for the current language object.\n"
	},
	"mw.language 014": {
		"prefix": "mw.language:isRTL()",
		"body": [
			":isRTL()$0"
		],
		"description": "Checks whether the language code is right-to-left.\n"
	},
	"mw.language 015": {
		"prefix": "mw.language:lc( s )",
		"body": [
			":lc( ${1:s} )$0"
		],
		"description": "Converts the whole string to lowercase.\n"
	},
	"mw.language 016": {
		"prefix": "mw.language:lcfirst( s )",
		"body": [
			":lcfirst( ${1:s} )$0"
		],
		"description": "Converts the first char in the string to lowercase.\n"
	},
	"mw.language 017": {
		"prefix": "mw.language:uc( s )",
		"body": [
			":uc( ${1:s} )$0"
		],
		"description": "Converts the whole string to uppercase.\n"
	},
	"mw.language 018": {
		"prefix": "mw.language:ucfirst( s )",
		"body": [
			":ucfirst( ${1:s} )$0"
		],
		"description": "Converts the first char in the string to uppercase.\n"
	},
	"mw.language 019": {
		"prefix": "mw.language:caseFold( s )",
		"body": [
			":caseFold( ${1:s} )$0"
		],
		"description": "Converts the string for case-insensitive comparison.\n"
	},
	"mw.language 020": {
		"prefix": "mw.language:formatNum( n, options )",
		"body": [
			":formatNum( ${1:n${2:, ${3:options}}} )$0"
		],
		"description": "Formats a number according to rules for the given language.\n"
	},
	"mw.language 021": {
		"prefix": "mw.language:formatDate( format, timestamp, local )",
		"body": [
			":formatDate( ${1:format}, ${2:timestamp}, ${3:local} )$0"
		],
		"description": "Formats a date according to rules for the given language.\n"
	},
	"mw.language 022": {
		"prefix": "mw.language:formatDuration( seconds, allowedIntervals )",
		"body": [
			":formatDuration( ${1:seconds${2:, ${3:allowedIntervals}}} )$0"
		],
		"description": "Formats a duration according to rules for the given language.\n"
	},
	"mw.language 023": {
		"prefix": "mw.language:parseFormattedNumber( s )",
		"body": [
			":parseFormattedNumber( ${1:s} )$0"
		],
		"description": "Inverts a formatted number in a given language into its source form.\n"
	},
	"mw.language 024": {
		"prefix": "mw.language:convertPlural( n, ... )",
		"body": [
			":convertPlural( ${1:n}, ${2:...} )$0"
		],
		"description": "Choose the appropriate grammatical form given the language.\n"
	},
	"mw.language 025": {
		"prefix": "mw.language:convertPlural( n, forms )",
		"body": [
			":convertPlural( ${1:n}, ${2:forms} )$0"
		],
		"description": "Choose the appropriate grammatical form given the language.\n"
	},
	"mw.language 026": {
		"prefix": "mw.language:plural( n, ... )",
		"body": [
			":plural( ${1:n}, ${2:...} )$0"
		],
		"description": "Choose the appropriate grammatical form given the language.\n"
	},
	"mw.language 027": {
		"prefix": "mw.language:plural( n, forms )",
		"body": [
			":plural( ${1:n}, ${2:forms} )$0"
		],
		"description": "Choose the appropriate grammatical form given the language.\n"
	},
	"mw.language 028": {
		"prefix": "mw.language:convertGrammar( word, case )",
		"body": [
			":convertGrammar( ${1:word}, ${2:case} )$0"
		],
		"description": "Choose the appropriate inflection given the language.\n"
	},
	"mw.language 029": {
		"prefix": "mw.language:grammar( case, word )",
		"body": [
			":grammar( ${1:word}, ${2:case} )$0"
		],
		"description": "Choose the appropriate inflection given the language.\n"
	},
	"mw.language 030": {
		"prefix": "mw.language:gender( what, masculine, feminine, neutral )",
		"body": [
			":gender( ${1:what}, ${2:masculine}, ${3:feminine}, ${4:neutral} )$0"
		],
		"description": "Choose the appropriate gender form given the language.\n"
	},
	"mw.language 031": {
		"prefix": "mw.language:gender( what, { masculine, feminine, neutral } )",
		"body": [
			":gender( ${1:what}, { ${2:masculine}, ${3:feminine}, ${4:neutral} } )$0"
		],
		"description": "Choose the appropriate gender form given the language.\n"
	},
	"mw.language 032": {
		"prefix": "mw.language:getArrow( direction )",
		"body": [
			":getArrow( ${1:direction} )$0"
		],
		"description": "Get a Unicode arrow character corresponding to direction given the language.\n"
	},
	"mw.language 033": {
		"prefix": "mw.language:getDir()",
		"body": [
			":getDir()$0"
		],
		"description": "Get the Unicode direction mark given the language.\n"
	},
	"mw.language 034": {
		"prefix": "mw.language:getDirMark( opposite )",
		"body": [
			":getDirMark( ${1:opposite} )$0"
		],
		"description": "Get the Unicode direction mark corresponding to opposite given the language.\n"
	},
	"mw.language 035": {
		"prefix": "mw.language:getDirMarkEntity( opposite )",
		"body": [
			":getDirMarkEntity( ${1:opposite} )$0"
		],
		"description": "mw.language:getDirMarkEntity( opposite )\n opposite - boolean for inverting direction"
	},
	"mw.language 036": {
		"prefix": "mw.language:getDurationIntervals( seconds )",
		"body": [
			":getDurationIntervals( ${1:seconds} )$0"
		],
		"description": "Divides a duration according to rules for the given language.\n"
	},
	"mw.language 037": {
		"prefix": "mw.language:getDurationIntervals( seconds, allowedIntervals )",
		"body": [
			":getDurationIntervals( ${1:seconds${2:, ${3:allowedIntervals}}} )$0"
		],
		"description": "Divides a duration according to rules for the given language.\n"
	}
}