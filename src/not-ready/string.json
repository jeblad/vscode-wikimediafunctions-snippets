{
	"@metadata": {
		"name": "string",
		"comment": "The library is imported as default, it is \"implied\", and can be fully identified by the library prefix. This is nearly always named as \"string\", so it is pretty safe to assume it can be used as prefix.",
		"authors": [
			"Jeblad"
		]
	},
	"string 001": {
		"prefix": "string.byte( string[, firstIndex[, lastIndex]] )",
		"body": [
			"string.byte( ${1:string}${2:, ${3:firstIndex}${4:, ${5:lastIndex}}} )$0"
		],
		"description": "Returns the string as an array of bytes.\n"
	},
	"string 002": {
		"prefix": "string.char( ... )",
		"body": [
			"string.char( ${1:...} )$0"
		],
		"description": "Returns the arguments as a string of chars.\n"
	},

	"string 003": {
		"prefix": "string.find( string, pattern[, init[, plain]] )",
		"body": [
			"string.find( ${1:string}, ${2:pattern}${3:, ${4:init}${5:, ${6:plain}}} )$0"
		],
		"description": "Search for the first occurence of pattern within the string.\n"
	},
	"string 004": {
		"prefix": "string.format( format[, ...] )",
		"body": [
			"string.format( ${1:format}${2:, ${3:...}} )$0"
		],
		"description": "Formats the string, and injects optional arguments.\n"
	},
	"string 005": {
		"prefix": "string.gmatch( string, pattern )",
		"body": [
			"string.gmatch( ${1:string}, ${2:pattern} )$0"
		],
		"description": "Creates an iterator for the captures from the given arguments.\n"
	},
	"string 006": {
		"prefix": "string.gsub( string, pattern, replacement[, number] )",
		"body": [
			"string.gsub( ${1:string}, ${2:pattern}, ${3:replacement}${4:, ${5:number}} )$0"
		],
		"description": "Returns the string with occurences of patterns replaced.\n"
	},
	"string 007": {
		"prefix": "string.len( string )",
		"body": [
			"string.len( ${1:string} )$0"
		],
		"description": "Calculates the length of the string in bytes.\n"
	},
	"string 008": {
		"prefix": "string.lower( string )",
		"body": [
			"string.lower( ${1:string} )$0"
		],
		"description": "Change all ascii uppercase letters to lowercase.\n"
	},
	"string 009": {
		"prefix": "string.match( string, pattern[, init] )",
		"body": [
			"string.match( ${1:string}, ${2:pattern}${3:, ${4:init}} )$0"
		],
		"description": "Returns the first part matched by pattern.\n"
	},
	"string 010": {
		"prefix": "string.rep( string, number )",
		"body": [
			"string.rep( ${1:string}, ${2:number} )$0"
		],
		"description": "Returns a string with n copies of s.\n"
	},
	"string 011": {
		"prefix": "string.reverse( string )",
		"body": [
			"string.reverse( ${1:string} )$0"
		],
		"description": "Returns the string of chars in reverse byte order.\n"
	},
	"string 012": {
		"prefix": "string.sub( string, firstIndex[, lastIndex] )",
		"body": [
			"string.sub( ${1:string}, ${2:firstIndex}${3:, ${4:lastIndex}} )$0"
		],
		"description": "Returns the part given by the arguments.\n"
	},
	"string 013": {
		"prefix": "string.upper( string )",
		"body": [
			"string.upper( ${1:string} )$0"
		],
		"description": "Change all ascii lowercase letters to uppercase.\n"
	}
}